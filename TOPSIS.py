# TOPSIS_Dashboard_Full.py
# ·ª®ng d·ª•ng t√≠ch h·ª£p K·∫øt n·ªëi DB, Import CSV v√† Dashboard AHP-TOPSIS Streamlit

# --- PH·∫¶N 1: IMPORT C√ÅC TH∆Ø VI·ªÜN C·∫¶N THI·∫æT ---
import streamlit as st
import pandas as pd
import numpy as np
import yfinance as yf # Th∆∞ vi·ªán ƒë·ªÉ l·∫•y d·ªØ li·ªáu ch·ª©ng kho√°n
import plotly.express as px
import itertools # ƒê·ªÉ t·∫°o c√°c c·∫∑p so s√°nh cho AHP

# Th∆∞ vi·ªán cho MySQL v√† Import CSV
import mysql.connector
from mysql.connector import Error
from sqlalchemy import create_engine 

# --- C·∫§U H√åNH TRANG WEB ---
st.set_page_config(
    page_title="TOPSIS - Ph√¢n t√≠ch R·ªßi ro C·ªï phi·∫øu",
    page_icon="‚öñÔ∏è",
    layout="wide"
)

# --- 2. C√ÅC H√ÄM X·ª¨ L√ù L√ïI (AHP V√Ä TOPSIS) ---

@st.cache_data
def get_stock_data(tickers_list):
    """
    H√†m l·∫•y c√°c ch·ªâ s·ªë t√†i ch√≠nh quan tr·ªçng cho vi·ªác ph√¢n t√≠ch r·ªßi ro t·ª´ Yahoo Finance.
    """
    financial_data = []
    for ticker_symbol in tickers_list:
        try:
            ticker = yf.Ticker(ticker_symbol)
            info = ticker.info
            
            # L·∫•y c√°c ch·ªâ s·ªë
            data = {
                'M√£ CP': ticker_symbol,
                'Beta': info.get('beta'),
                'P/E': info.get('trailingPE'),
                'N·ª£/V·ªën CSH': info.get('debtToEquity'),
                'ROE': info.get('returnOnEquity'),
                'Bi√™n LN': info.get('profitMargins')
            }
            financial_data.append(data)
        except Exception as e:
            # st.warning(f"Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu cho m√£ '{ticker_symbol}'. Vui l√≤ng ki·ªÉm tra l·∫°i m√£ c·ªï phi·∫øu.")
            pass # B·ªè qua l·ªói v√† ti·∫øp t·ª•c v·ªõi c√°c m√£ kh√°c
            
    df = pd.DataFrame(financial_data).set_index('M√£ CP')
    
    # X·ª≠ l√Ω missing values b·∫±ng gi√° tr·ªã trung v·ªã c·ªßa c·ªôt
    for col in df.columns:
        if df[col].isnull().any():
            median_val = df[col].median()
            df[col] = df[col].fillna(median_val)
            
    return df

def calculate_ahp_weights(comparison_matrix):
    """
    H√†m t√≠nh tr·ªçng s·ªë (eigenvector) c·ªßa ma tr·∫≠n so s√°nh c·∫∑p AHP v√† CR.
    """
    try:
        A = np.array(comparison_matrix)
        n = A.shape[0]

        # T√≠nh gi√° tr·ªã ri√™ng v√† vector ri√™ng
        eigenvalues, eigenvectors = np.linalg.eig(A)
        max_eigen_value = np.max(eigenvalues.real)
        
        max_eigen_vector_index = np.argmax(eigenvalues.real)
        weights = eigenvectors[:, max_eigen_vector_index].real
        weights = weights / weights.sum() # Chu·∫©n h√≥a tr·ªçng s·ªë
        
        # T√≠nh Ch·ªâ s·ªë nh·∫•t qu√°n (CI)
        CI = (max_eigen_value - n) / (n - 1)
        
        # Ch·ªâ s·ªë ng·∫´u nhi√™n (RI)
        RI_values = {1: 0.00, 2: 0.00, 3: 0.58, 4: 0.90, 5: 1.12, 6: 1.24, 7: 1.32, 8: 1.41, 9: 1.45, 10: 1.49}
        RI = RI_values.get(n, 1.49) 

        # T·ª∑ l·ªá nh·∫•t qu√°n (CR)
        CR = CI / RI if RI != 0 else 0
        
        return weights, CR
    except Exception as e:
        return np.array([1/n for _ in range(n)]), 1.0 

def run_topsis(decision_matrix, weights, impacts):
    """
    H√†m th·ª±c thi thu·∫≠t to√°n TOPSIS ƒë·ªÉ x·∫øp h·∫°ng c√°c l·ª±a ch·ªçn.
    """
    # B∆∞·ªõc 1: Chu·∫©n h√≥a ma tr·∫≠n quy·∫øt ƒë·ªãnh
    norm_matrix = decision_matrix / np.sqrt((decision_matrix**2).sum(axis=0))
    
    # B∆∞·ªõc 2: T√≠nh to√°n ma tr·∫≠n ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a v√† c√≥ tr·ªçng s·ªë
    weighted_matrix = norm_matrix * weights
    
    # B∆∞·ªõc 3: X√°c ƒë·ªãnh gi·∫£i ph√°p l√Ω t∆∞·ªüng t·ªët nh·∫•t (A+) v√† t·ªá nh·∫•t (A-)
    ideal_best = np.zeros(weighted_matrix.shape[1])
    ideal_worst = np.zeros(weighted_matrix.shape[1])
    
    for i in range(len(impacts)):
        if impacts[i] == 1: # Benefit (c√†ng cao c√†ng t·ªët)
            ideal_best[i] = weighted_matrix.iloc[:, i].max()
            ideal_worst[i] = weighted_matrix.iloc[:, i].min()
        else: # Cost (c√†ng th·∫•p c√†ng t·ªët)
            ideal_best[i] = weighted_matrix.iloc[:, i].min()
            ideal_worst[i] = weighted_matrix.iloc[:, i].max()
            
    # B∆∞·ªõc 4: T√≠nh kho·∫£ng c√°ch Euclidean ƒë·∫øn gi·∫£i ph√°p l√Ω t∆∞·ªüng
    dist_to_best = np.sqrt(((weighted_matrix - ideal_best)**2).sum(axis=1))
    dist_to_worst = np.sqrt(((weighted_matrix - ideal_worst)**2).sum(axis=1))
    
    # B∆∞·ªõc 5: T√≠nh ƒëi·ªÉm TOPSIS
    epsilon = 1e-6
    topsis_score = dist_to_worst / (dist_to_best + dist_to_worst + epsilon)
    
    return topsis_score


# --- 3. PH·∫¶N X·ª¨ L√ù K·∫æT N·ªêI V√Ä IMPORT CSV (Ch·ªâ ch·∫°y m·ªôt l·∫ßn khi kh·ªüi ƒë·ªông) ---

# C·∫•u h√¨nh k·∫øt n·ªëi
db_host = '127.0.0.1' 
db_user = 'root'
db_password = '130225' 
db_name = 'tickets'    
db_port = 3306         
connection = None  
csv_file_path = 'du_lieu_mau_co_phieu.csv' # <== THAY TH·∫æ b·∫±ng t√™n file CSV
table_name = 'du_lieu_topsis'              # T√™n b·∫£ng ƒë√≠ch

# Streamlit cache ƒë·ªÉ ƒë·∫£m b·∫£o code n√†y ch·ªâ ch·∫°y m·ªôt l·∫ßn
@st.cache_resource
def run_db_operations(db_host, db_user, db_password, db_name, db_port, csv_file_path, table_name):
    connection = None
    try:
        connection = mysql.connector.connect(
            host=db_host,
            user=db_user,
            password=db_password,
            database=db_name,
            port=db_port
        )

        if connection.is_connected():
            st.toast("‚úÖ K·∫øt n·ªëi MySQL th√†nh c√¥ng!", icon="üíæ")

            # --- LOGIC IMPORT CSV ---
            try:
                df_import = pd.read_csv(csv_file_path)
                
                # C·∫ßn c√†i: pip install sqlalchemy mysql-connector-python
                db_url = f"mysql+mysqlconnector://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
                engine = create_engine(db_url)
                
                df_import.to_sql(
                    name=table_name, 
                    con=engine, 
                    if_exists='replace',
                    index=False
                )
                st.toast(f"‚úÖ ƒê√£ import CSV v√†o b·∫£ng '{table_name}' th√†nh c√¥ng!", icon="üöÄ")
                
            except FileNotFoundError:
                st.warning(f"‚ùå C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y file CSV '{csv_file_path}'. B·ªè qua Import.")
            except ImportError:
                 st.error("‚ùå L·ªói Th∆∞ vi·ªán: Vui l√≤ng c√†i ƒë·∫∑t 'sqlalchemy' ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng Import CSV.")
            except Exception as e:
                st.error(f"‚ùå L·ªói khi import CSV: {e}")

            # --- TRUY V·∫§N KI·ªÇM TRA B·∫¢NG M·∫™U ---
            cursor = connection.cursor()
            query = f"SELECT COUNT(*) FROM {table_name};"
            cursor.execute(query)
            count = cursor.fetchone()[0]
            st.sidebar.markdown(f"**Tr·∫°ng th√°i DB:** B·∫£ng `{table_name}` c√≥ **{count}** d√≤ng.")
            cursor.close()

    except Error as e:
        st.error(f"‚ùå L·ªói K·∫øt n·ªëi MySQL: {e}. Vui l√≤ng ki·ªÉm tra Server v√† th√¥ng tin ƒëƒÉng nh·∫≠p.")
    finally:
        if connection and connection.is_connected():
            connection.close()

# Th·ª±c thi c√°c thao t√°c DB khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông l·∫ßn ƒë·∫ßu
run_db_operations(db_host, db_user, db_password, db_name, db_port, csv_file_path, table_name)


# --- 4. X√ÇY D·ª∞NG GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG (STREAMLIT UI) ---

st.title("‚öñÔ∏è ·ª®ng d·ª•ng Ph√¢n t√≠ch R·ªßi ro ƒê·∫ßu t∆∞ C·ªï phi·∫øu b·∫±ng TOPSIS & AHP")
st.info("·ª®ng d·ª•ng s·ª≠ d·ª•ng **AHP** ƒë·ªÉ x√°c ƒë·ªãnh tr·ªçng s·ªë ti√™u ch√≠ v√† **TOPSIS** ƒë·ªÉ x·∫øp h·∫°ng r·ªßi ro c·ªßa c·ªï phi·∫øu (d·ªØ li·ªáu l·∫•y t·ª´ Yahoo Finance).")

# ƒê·ªãnh nghƒ©a c√°c ti√™u ch√≠ v√† t√°c ƒë·ªông c·ªßa ch√∫ng
criteria = {
    'Beta': -1, 'P/E': -1, 'N·ª£/V·ªën CSH': -1,
    'ROE': 1, 'Bi√™n LN': 1
}
criteria_list = list(criteria.keys())
n_criteria = len(criteria_list)


# --- Sidebar: N∆°i ng∆∞·ªùi d√πng nh·∫≠p li·ªáu v√† c·∫•u h√¨nh ---
with st.sidebar:
    st.header("‚öôÔ∏è B·∫£ng ƒëi·ªÅu khi·ªÉn & D·ªØ li·ªáu")
    
    # Nh·∫≠p danh s√°ch c·ªï phi·∫øu
    tickers_input = st.text_area(
        "Nh·∫≠p c√°c m√£ c·ªï phi·∫øu (c√°ch nhau b·ªüi d·∫•u ph·∫©y ho·∫∑c xu·ªëng d√≤ng):",
        "AAPL, MSFT, GOOGL, TSLA, NVDA"
    )
    
    st.header("‚öñÔ∏è Thi·∫øt l·∫≠p Tr·ªçng s·ªë b·∫±ng AHP")
    st.markdown("S·ª≠ d·ª•ng thanh tr∆∞·ª£t ƒë·ªÉ so s√°nh ƒë·ªô quan tr·ªçng c·ªßa c√°c ti√™u ch√≠ (1/9...9).")
    
    # Kh·ªüi t·∫°o ma tr·∫≠n so s√°nh
    comparison_values = {}
    
    # 1. T·∫°o giao di·ªán so s√°nh c·∫∑p
    for crit_i, crit_j in itertools.combinations(criteria_list, 2):
        key = tuple(sorted((crit_i, crit_j)))
        
        comparison_value = st.select_slider(
            f"**{crit_i}** quan tr·ªçng h∆°n **{crit_j}** bao nhi√™u?",
            options=[1/9, 1/8, 1/7, 1/6, 1/5, 1/4, 1/3, 1/2, 1, 2, 3, 4, 5, 6, 7, 8, 9],
            value=1.0,
            format_func=lambda x: f"1/{round(1/x)}" if x < 1 else str(round(x))
        )
        comparison_values[key] = comparison_value
        

    # 2. X√¢y d·ª±ng ma tr·∫≠n so s√°nh d·ª±a tr√™n input
    comparison_matrix = [[0.0] * n_criteria for _ in range(n_criteria)]
    
    for i in range(n_criteria):
        for j in range(n_criteria):
            if i == j:
                comparison_matrix[i][j] = 1.0 # ƒê∆∞·ªùng ch√©o ch√≠nh
            elif i < j:
                crit_i = criteria_list[i]
                crit_j = criteria_list[j]
                key = tuple(sorted((crit_i, crit_j)))
                comparison_matrix[i][j] = comparison_values[key]
            else:
                comparison_matrix[i][j] = 1.0 / comparison_matrix[j][i]
                
    # 3. T√≠nh to√°n tr·ªçng s·ªë AHP v√† CR
    ahp_weights_array, CR = calculate_ahp_weights(comparison_matrix)
    
    st.subheader("K·∫øt qu·∫£ AHP:")
    st.markdown(f"**T·ª∑ l·ªá nh·∫•t qu√°n (CR):** `{CR:.4f}`")
    
    # T·∫°o dictionary tr·ªçng s·ªë (ch·ªâ khi CR th·∫•p)
    if CR > 0.1:
        st.error("‚ö†Ô∏è **CR > 0.1**. M·ª©c ƒë·ªô nh·∫•t qu√°n th·∫•p. Vui l√≤ng ƒëi·ªÅu ch·ªânh c√°c so s√°nh c·∫∑p.")
        weights = {}
    else:
        st.success("‚úÖ **CR < 0.1**. M·ª©c ƒë·ªô nh·∫•t qu√°n ch·∫•p nh·∫≠n ƒë∆∞·ª£c.")
        
        weights = {criteria_list[i]: ahp_weights_array[i] for i in range(n_criteria)}
        
        st.markdown("**Tr·ªçng s·ªë ƒë∆∞·ª£c t√≠nh to√°n:**")
        weights_df = pd.DataFrame(weights.items(), columns=['Ti√™u ch√≠', 'Tr·ªçng s·ªë']).set_index('Ti√™u ch√≠')
        st.dataframe(weights_df.style.format("{:.4f}"))


# --- N√∫t b·∫Øt ƒë·∫ßu ph√¢n t√≠ch TOPSIS ---
if st.button("üöÄ B·∫Øt ƒë·∫ßu Ph√¢n t√≠ch TOPSIS", use_container_width=True):
    # X·ª≠ l√Ω input c·ªßa ng∆∞·ªùi d√πng
    tickers_list = [t.strip().upper() for t in tickers_input.replace(',', '\n').split('\n') if t.strip()]
    
    if not tickers_list:
        st.error("Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt m√£ c·ªï phi·∫øu.")
    elif CR > 0.1:
        st.warning("Vui l√≤ng s·ª≠a l·ªói M·ª©c ƒë·ªô nh·∫•t qu√°n (CR > 0.1) trong b·∫£ng ƒëi·ªÅu khi·ªÉn AHP tr∆∞·ªõc khi ch·∫°y TOPSIS.")
    elif not weights:
        st.warning("Kh√¥ng th·ªÉ t√≠nh tr·ªçng s·ªë AHP h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh.")
    else:
        # --- 5. L·∫§Y V√Ä HI·ªÇN TH·ªä D·ªÆ LI·ªÜU ---
        with st.spinner(f"ƒêang t·∫£i d·ªØ li·ªáu cho {len(tickers_list)} c·ªï phi·∫øu..."):
            raw_data = get_stock_data(tickers_list)
        
        if not raw_data.empty:
            st.header("üìä D·ªØ li·ªáu T√†i ch√≠nh th√¥")
            st.dataframe(raw_data.style.format("{:.4f}"))
            
            # --- 6. TH·ª∞C THI TOPSIS V√Ä HI·ªÇN TH·ªä K·∫æT QU·∫¢ ---
            st.header("üèÜ K·∫øt qu·∫£ X·∫øp h·∫°ng R·ªßi ro")
            
            # Chu·∫©n b·ªã d·ªØ li·ªáu cho h√†m TOPSIS
            decision_matrix = raw_data[list(criteria.keys())]
            weights_list = np.array([weights[crit] for crit in criteria])
            impacts_list = np.array([criteria[crit] for crit in criteria])
            
            # Ch·∫°y thu·∫≠t to√°n
            scores = run_topsis(decision_matrix, weights_list, impacts_list)
            
            # T·∫°o DataFrame k·∫øt qu·∫£
            results_df = raw_data.copy()
            results_df['ƒêi·ªÉm TOPSIS'] = scores
            results_df['X·∫øp h·∫°ng'] = results_df['ƒêi·ªÉm TOPSIS'].rank(ascending=False).astype(int)
            results_df = results_df.sort_values(by='X·∫øp h·∫°ng')
            
            st.success("**Di·ªÖn gi·∫£i:** C·ªï phi·∫øu c√≥ **X·∫øp h·∫°ng 1** v√† **ƒêi·ªÉm TOPSIS cao nh·∫•t** ƒë∆∞·ª£c ƒë√°nh gi√° l√† l·ª±a ch·ªçn **√≠t r·ªßi ro nh·∫•t**.")
            st.dataframe(
                results_df.style.format("{:.4f}").background_gradient(
                    cmap='Greens', subset=['ƒêi·ªÉm TOPSIS']
                ), 
                use_container_width=True
            )
            
            # --- 7. TR·ª∞C QUAN H√ìA K·∫æT QU·∫¢ ---
            st.header("üé® Tr·ª±c quan h√≥a K·∫øt qu·∫£")
            fig = px.bar(
                results_df,
                x=results_df.index,
                y='ƒêi·ªÉm TOPSIS',
                color='ƒêi·ªÉm TOPSIS',
                color_continuous_scale='Greens',
                title='So s√°nh ƒêi·ªÉm TOPSIS gi·ªØa c√°c C·ªï phi·∫øu',
                labels={'M√£ CP': 'M√£ C·ªï phi·∫øu', 'ƒêi·ªÉm TOPSIS': 'ƒêi·ªÉm TOPSIS (C√†ng cao c√†ng t·ªët)'}
            )
            fig.update_layout(xaxis={'categoryorder':'total descending'})
            st.plotly_chart(fig, use_container_width=True)